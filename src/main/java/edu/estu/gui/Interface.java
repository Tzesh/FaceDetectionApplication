package edu.estu.gui;

import edu.estu.FaceDetector;

import java.awt.Desktop;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.List;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Interface extends javax.swing.JFrame {
    FaceDetector faceDetector = new FaceDetector(); // FaceDetector class instance
    String imagePath; // to save selected image path
    int pos = 0; // to traversal between faces

    public Interface() {
        initComponents(); // after initialization required components
        displayButton.setEnabled(false); // just select button must be set enabled
        processButton.setEnabled(false);
        selectButton.setEnabled(true);
        previousButton.setEnabled(false);
        nextButton.setEnabled(false);
        browseButton.setEnabled(false);
        setConsole(console); // setting JTextArea console as default output type of the program
    }

    private void setConsole(JTextArea console) { // all of the outputs will appear into JTextArea
        TextAreaOutputStream taos = new TextAreaOutputStream(console, 60);
        PrintStream ps = new PrintStream(taos);
        System.setOut(ps);
        System.setErr(ps);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        processButton = new javax.swing.JButton();
        selectButton = new javax.swing.JButton();
        displayButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        resultImage = new javax.swing.JLabel();
        face = new javax.swing.JLabel();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        browseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(720, 480));
        setMinimumSize(new java.awt.Dimension(720, 480));
        setName("GUI"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(720, 480));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("Face Detector");

        processButton.setText("Process");
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        selectButton.setText("Select");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        displayButton.setText("Display");
        displayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayButtonActionPerformed(evt);
            }
        });

        console.setEditable(false);
        console.setColumns(20);
        console.setRows(5);
        console.setText("Welcome to Face Detector,\nPlease select an image to process.");
        jScrollPane2.setViewportView(console);

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(selectButton)
                                                                                .addGap(35, 35, 35)
                                                                                .addComponent(processButton)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(displayButton))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(previousButton)
                                                                                .addGap(26, 26, 26)
                                                                                .addComponent(browseButton)
                                                                                .addGap(26, 26, 26)
                                                                                .addComponent(nextButton)
                                                                                .addGap(0, 0, Short.MAX_VALUE)))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(32, 32, 32)
                                                                .addComponent(face, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                .addComponent(resultImage, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel1)
                                .addGap(1, 1, 1)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(resultImage, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(selectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(processButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(displayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(face, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(previousButton)
                                                        .addComponent(browseButton)
                                                        .addComponent(nextButton))))
                                .addContainerGap(53, Short.MAX_VALUE))
        );

        pack();
    }

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) { // detecting faces
        try {
            faceDetector.detectAndDisplay(imagePath); // calling detectAndDisplay method in FaceDetector class
        } catch (IOException e) {
            System.out.println("An unknown error has occurred during the process.");
        }
        processButton.setEnabled(false); // process does not have to re-done since it's done
        if (getImages().size() != 0) displayButton.setEnabled(true); // if any face is detected then it can be displayed
        System.out.println("Image processed, you can display faces as you wish.");
        selectButton.setEnabled(true); // without displaying the faces program still keep continue to detect faces
    }

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) { // selecting the image which will be processed
        JFileChooser imageChooser = new JFileChooser(); // using JFileChooser to get image
        imageChooser.setAcceptAllFileFilterUsed(false);
        imageChooser.addChoosableFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "png", "jpeg")); // making sure that the image selected is an image file or at least have the image file extension
        imageChooser.showOpenDialog(null);
        File image = imageChooser.getSelectedFile(); // getting the image file
        if (image == null) { // if image is null on other words not selected
            System.out.println("Please select an image to process.");
            return;
        }
        System.out.println("Image selected, you may process it now."); // if it's not
        imagePath = image.getAbsolutePath(); // saving it to process
        selectButton.setEnabled(false); // select button is done
        processButton.setEnabled(true); // process button's turn
    }

    private void displayButtonActionPerformed(java.awt.event.ActionEvent evt) { // display button do display faces and result image
        displayButton.setEnabled(false); // display button does not required to re-active
        ImageIcon icon = new ImageIcon(faceDetector.getResultImage()); // getting the result image and saving it as ImageIcon
        Image image = icon.getImage().getScaledInstance(resultImage.getWidth(), resultImage.getHeight(), Image.SCALE_SMOOTH); // transforming it into image by scaling it
        resultImage.setIcon(new ImageIcon(image)); // setting the resultImage JLabel which is an area collapsed for result image
        previousButton.setEnabled(true); // getting previous face is possible since result image is displayable and faces are detected
        nextButton.setEnabled(true); // also next button
        browseButton.setEnabled(true); // and of course browse button
        showImage(0); // showing the first detected face
    }

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) { // previous button to show face image
        pos -= 1;
        if (pos < 0) pos = 0;
        showImage(pos);
    }

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) { // next button to show next face image
        pos += 1;
        if (pos >= getImages().size()) pos = getImages().size() - 1;
        showImage(pos);
    }

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) { // browse button to open temporary direction
        try {
            Desktop.getDesktop().open(faceDetector.getTempDir()); // opening temporary direction which consists all images
        } catch (IOException ex) {
            System.out.println("An unknown error has occurred during the browse operation.");
        }
    }


    public void showImage(int index) { // method to show face images in face JLabel
        List<String> imagesList = getImages();
        pos = index;
        String imageName = imagesList.get(index);
        ImageIcon icon = new ImageIcon(imageName);
        Image image = icon.getImage().getScaledInstance(face.getWidth(), face.getHeight(), Image.SCALE_SMOOTH);
        face.setIcon(new ImageIcon(image));
    }

    private List getImages() {
        return faceDetector.getImageNames();
    }


    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    private javax.swing.JButton browseButton;
    private javax.swing.JTextArea console;
    private javax.swing.JButton displayButton;
    private javax.swing.JLabel face;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JButton processButton;
    private javax.swing.JLabel resultImage;
    private javax.swing.JButton selectButton;
}
